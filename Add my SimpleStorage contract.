// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18; // solidity versions

contract SimpleStorage {
    // favoriteNumber gets initialized to 0 if no value
    uint256 myFavoriteNumber; // 0
        
    // uint256 favoriteNumbers; // [0, 16, 42]
    struct Person {
        uint256 favoriteNumber;
        string name;
    }

    // dynamic array

    // static array
    Person[] public listOfPeople; //deafulted to empty list = []

    mapping(string => uint256) public nameToFavoriteNumber;


    address public owner;

    // Set the owner to the deployer of the contract
    constructor() {
        owner = msg.sender;
    }

    // Modifier that only allows the owner to call a function
    modifier onlyOwner() {
        require(msg.sender == owner, "Not owner");
        _;
    }

    // This function allows the contract to accept ETH directly
    receive() external payable {
        // Do nothing, just accept ETH
    }

    // Only the owner can withdraw all ETH stored in the contract
    function withdraw() external onlyOwner {
        payable(owner).transfer(address(this).balance);
    }

// Reentrancy guard state variable
    bool private locked;

    modifier nonReentrant() {
        require(!locked, "ReentrancyGuard: reentrant call");
        locked = true;
        _;
        locked = false;
    }

    // human -> 232
    function store(uint256 _favoriteNumber) public {
        myFavoriteNumber = _favoriteNumber;
    }

    //view, pure
    function retrieve() view public returns (uint256){
        return myFavoriteNumber;
        
    }

    // calldata, memory, storage
    function addPerson(string memory _name, uint256 _favoriteNumber) public{
        listOfPeople.push( Person(_favoriteNumber, _name) );
        nameToFavoriteNumber[_name] = _favoriteNumber;
    }

}
